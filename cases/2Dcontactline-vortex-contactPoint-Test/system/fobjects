/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2206                                  |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
functions
{
    gradPsiError
    {
        type            gradPsiError;
        libs            ( fieldFunctionObjects leiaFunctionObjects );
        field           psi;
        result          gradPsiError;
        writeControl    timeStep;
        enabled         false;
    }
    gradPsi
    {
        type            grad;
        libs            ( fieldFunctionObjects );
        field           psi;
        result          gradPsi;
        writeControl    timeStep;
        enabled         false;
    }
    gradPsiErrorCSV
    {
        type            gradPsiErrorCSV;
        libs            ( leiaFunctionObjects );
        writeControl    timeStep;
        field           gradPsiError;
        enabled         false;
    }
    contactPoint
    {
        type            contactPoint;
        libs            ( fieldFunctionObjects leiaFunctionObjects );
        writeControl    timeStep;
        field           psi;
        patch           bottom;
    }
    kappa
    {
        type coded;
        libs (utilityFunctionObjects);

        // Name of on-the-fly generated functionObject
        name            kappa;
        writeControl    timeStep;
        enabled         true;
        codeWrite
        #{
            // Lookup psi
            const volScalarField& psi = mesh().lookupObject<volScalarField>("psi");

            // Calc kappa
            const volVectorField gradPsi = fvc::grad(psi);
            const volScalarField magGradPsi = volScalarField("magGradPSi", mag(gradPsi));
            magGradPsi.write();

            const volVectorField normal = gradPsi/mag(gradPsi);

            const volScalarField kappa = volScalarField("kappa", -fvc::div(normal));
            kappa.write();
            const volScalarField kappa_tr = volScalarField("kappa_tr", -tr(fvc::grad(normal)));
            kappa_tr.write();

//            Vector<double> tensorVectorMul = [](Tensor<double> ten, Vector<double> vec) 
            auto tensorVectorMul = [](Tensor<double> ten, Vector<double> vec) 
            { 
                return Vector<double>(
                   ten.row(0) & vec, 
                   ten.row(1) & vec, 
                   ten.row(2) & vec 
                ); 
            };

//            const volVectorField tau1 = normal^vector(1,0,0);
            volVectorField tau1 = normal^vector(0,0,1);
            tau1.normalise();
            volVectorField tau2 = normal^tau1;
            tau2.normalise();
            const volTensorField gradNormal = fvc::grad(normal);
//            const volScalarField kappa_tau = volScalarField("kappa_tau", -1*(gradNormal*tau1)*tau1 - 1*(gradNormal*tau2)*tau2);
//            const auto test = gradNormal*tau1;
//            const auto test = gradNormal[0]*tau1[0];
//            const Vector<double> test = tensorVectorMul(gradNormal[0], tau1[0]);
            volScalarField kappa_tau = volScalarField("kappa_tau", kappa);
            forAll(kappa_tau, ID)
            {
//                kappa_tau[ID] = -1;
//                kappa_tau[ID] = -1*tensorVectorMul(gradNormal[ID], tau1[ID]) & tau1[ID] 
//                                -1*tensorVectorMul(gradNormal[ID], tau2[ID]) & tau2[ID];
                const auto tmp1 = tensorVectorMul(gradNormal[ID], tau1[ID]) & tau1[ID]; 
                const auto tmp2 = tensorVectorMul(gradNormal[ID], tau2[ID]) & tau2[ID];
                const auto tmp3 = tensorVectorMul(gradNormal[ID], normal[ID]) & normal[ID];
                kappa_tau[ID]   = -1*(tmp1 + tmp2 + tmp3);
            }
            kappa_tau.write();
            
            const volScalarField psi_orig = volScalarField("psi_orig", psi.clone()); 
            const volScalarField magGradPsi_orig = volScalarField("magGradPsi_orig", mag(fvc::grad(psi_orig)));
            magGradPsi_orig.write();

        #};
    }
    magGradPsi
    {
        type            mag;
        libs            (fieldFunctionObjects);
        field           gradPsi;
        result          magGradPsi;
        writeControl    timeStep;
        enabled         false;
    }
}


// ************************************************************************* //
